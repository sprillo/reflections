What happens when you initialize a repository? Why do you need to do it?

Initializing a repository in a directory creates the hidden .git directory used by git to manage the metadata necessary to hold the repo in the current directory. This is made through the git init command. No commits will be made yet, so the repo has 0 commits. To check the status of the repo and verify that there are no commits, we can use the git status command. It will return an error.


How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is the place to buffer files into the repository. By not tracking all the files in the working directory, we can keep personal files in the working directory without anyone else having to deal with them. Also, the staging area allows us to make logical commits, adding logically related files each time.


How can you use the staging area to make sure you have one commit per logical change?

By comparing the staging area changes against the last commit with git diff --staged, and checking that we are commiting exactly what we intended.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches are usefull when you want to try out a new feature for a proyect, or try experimenting with substantial changes, or make a slightly different version of your proyect, all without affecting the original proyect. Branching will preserve the original proyect (the master branch), and let you work on your branch at the same time.


How do the diagrams help you visualize the branch structure?

The tree diagram shows commits shared between branches, and also those commits which are unreachable by some branch, or reachable at all. It also shows us which the HEAD commit is. This also explains the 'detached HEAD' state warning when you git checkout a commit.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging two branches will result in a commit whose parents are thw two last commits on both branches. The current branch label will be moved up to the new commit. Git decides how to merge the two branches by analyzing the least common ancestor of both branches together with the latest commit on both branches.
