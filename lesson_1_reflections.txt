How did viewing a diff between two versions of a file help you see the bug that was introduced?

diff shows the lines that have been added, deleted, or modified, therefore condensing the bug into these lines.


How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

If we keep all versions of the file at each point, we can capture bugs using diff between the bugged version and the bug-free prevous version. Also, we can use older versions to recover usefull, removed code.


What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?

PROS:
- All versions can be logically explained in relation to prevous versions.
- Easy to know when a bug was introduced. Therefore, easy to find and fix bugs.

CONS:
- Being lazy and not commiting, or over-commiting.

Therefore, commits are usefull, but only if you know how to use them properly.


Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Google Docs is not designed for writing code or books: it is aimed at one file only, it tries to be user friendly, and is WYGIWYS. On the other hand, version controll systems like Git, are specifically designed for working on multiple, interrelated files, which make up programs. However, this makes Git less user friendly.


How can you use the commands git log and git diff to view the history of files?

git log allows you to see the commit history, ordered from most recent to least recent. Each commit will show its ID, author, date, and message. With the --stat argument, git log --stat also shows how many insertions and deletions were made between commits.

Aditionally, the git diff command allows us to manually inspect the differences between commits by applying it to consecutive commits, identified by their IDs.


How might using version control make you more confident to make changes that could break something?

If I broke anything, I could just use the git checkout command to find the commit that introduced the bug, and then git diff between the old and the new version to locate the bug.


Now that you have your workspace set up, what do you want to try using Git for?

For working on my Machine Learning proyect.